package org.example.service;

import org.example.entity.Admin;
import org.example.entity.User;
import org.example.entity.Customer;
import org.example.entity.RegularCustomer;
import org.example.repository.AdminRepository;
import org.example.repository.UserRepository;
import org.example.security.JwtUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

@Service
public class AuthService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private AdminRepository adminRepository;

    @Autowired
    private CustomerService customerService;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Autowired
    private JwtUtils jwtUtils;

    public Map<String, Object> registerUser(String username, String email, String password) {
        Map<String, Object> response = new HashMap<>();

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        if (userRepository.existsByUsername(username)) {
            response.put("success", false);
            response.put("message", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º —ñ–º'—è–º —É–∂–µ —ñ—Å–Ω—É—î");
            return response;
        }

        if (userRepository.existsByEmail(email)) {
            response.put("success", false);
            response.put("message", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email —É–∂–µ —ñ—Å–Ω—É—î");
            return response;
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        User user = new User(username, email, passwordEncoder.encode(password), User.Role.USER);
        userRepository.save(user);

        // –°—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç—ñ–π–Ω–æ–≥–æ –ø–æ–∫—É–ø—Ü—è –∑ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º –±–∞–ª–∞–Ω—Å–æ–º —Ç–∞ —ñ–º'—è–º
        RegularCustomer regularCustomer = new RegularCustomer(5000.0, username + " (ID: " + user.getId() + ")", 0.0f);
        customerService.saveRegularCustomer(regularCustomer);

        response.put("success", true);
        response.put("message", "–ü–æ—Å—Ç—ñ–π–Ω–∏–π –ø–æ–∫—É–ø–µ—Ü—å —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π! –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: 5000‚Ç¥");
        response.put("userId", user.getId());
        response.put("customerId", regularCustomer.getId());

        return response;
    }

    public Map<String, Object> registerAdmin(String username, String email, String password, String adminKey) {
        Map<String, Object> response = new HashMap<>();

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏–π –∫–ª—é—á
        if (!"ADMIN_SECRET_KEY_2024".equals(adminKey)) {
            response.put("success", false);
            response.put("message", "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏–π –∫–ª—é—á");
            return response;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        if (userRepository.existsByUsername(username)) {
            response.put("success", false);
            response.put("message", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º —ñ–º'—è–º —É–∂–µ —ñ—Å–Ω—É—î");
            return response;
        }

        if (userRepository.existsByEmail(email)) {
            response.put("success", false);
            response.put("message", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º email —É–∂–µ —ñ—Å–Ω—É—î");
            return response;
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        Admin admin = new Admin(username, email, passwordEncoder.encode(password));
        adminRepository.save(admin);

        // –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ —Ç–∞–∫–æ–∂ –æ—Ç—Ä–∏–º—É—é—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç—ñ–π–Ω–æ–≥–æ –ø–æ–∫—É–ø—Ü—è, –∞–ª–µ –∑ –±—ñ–ª—å—à–∏–º –±–∞–ª–∞–Ω—Å–æ–º
        RegularCustomer adminCustomer = new RegularCustomer(20000.0, "üë®‚Äçüíº " + username + " (–ê–¥–º—ñ–Ω ID: " + admin.getId() + ")", 1000.0f);
        customerService.saveRegularCustomer(adminCustomer);

        response.put("success", true);
        response.put("message", "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π! –ë–∞–ª–∞–Ω—Å: 20000‚Ç¥");
        response.put("adminId", admin.getId());
        response.put("customerId", adminCustomer.getId());

        return response;
    }

    public Map<String, Object> authenticate(String username, String password) {
        Map<String, Object> response = new HashMap<>();

        Optional<User> userOpt = userRepository.findByUsernameOrEmail(username, username);
        
        if (userOpt.isEmpty() || !passwordEncoder.matches(password, userOpt.get().getPassword())) {
            response.put("success", false);
            response.put("message", "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –ø–∞—Ä–æ–ª—å");
            return response;
        }

        User user = userOpt.get();
        
        if (!user.isActive()) {
            response.put("success", false);
            response.put("message", "–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ");
            return response;
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤—Ö–æ–¥—É –¥–ª—è –∞–¥–º—ñ–Ω–∞
        if (user instanceof Admin) {
            Admin admin = (Admin) user;
            admin.setLastLogin(LocalDateTime.now());
            adminRepository.save(admin);
        }

        // –®—É–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –ø–æ–∫—É–ø—Ü—è
        RegularCustomer customer = findCustomerByUserId(user.getId());
        if (customer == null) {
            // –Ø–∫—â–æ –ø–æ–∫—É–ø–µ—Ü—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π, —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ
            customer = new RegularCustomer(5000.0, user.getUsername() + " (ID: " + user.getId() + ")", 0.0f);
            customerService.saveRegularCustomer(customer);
        }

        // –ì–µ–Ω–µ—Ä—É—î–º–æ JWT —Ç–æ–∫–µ–Ω
        String token = jwtUtils.generateJwtToken(user.getUsername(), user.getRole().toString(), user.getId());

        response.put("success", true);
        response.put("message", "–ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞");
        response.put("token", token);
        response.put("user", createUserResponse(user, customer));

        return response;
    }

    public Map<String, Object> loginAsGuest() {
        Map<String, Object> response = new HashMap<>();

        // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ –≥–æ—Å—Ç—å–æ–≤–æ–≥–æ –ø–æ–∫—É–ø—Ü—è
        Customer guestCustomer = new Customer(2000.0); // –ì—ñ—Å—Ç—å –æ—Ç—Ä–∏–º—É—î –º–µ–Ω—à–∏–π –±–∞–ª–∞–Ω—Å
        customerService.saveCustomer(guestCustomer);

        // –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ—ñ–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≥–æ—Å—Ç—è
        Map<String, Object> guestUser = new HashMap<>();
        guestUser.put("id", guestCustomer.getId());
        guestUser.put("username", "–ì—ñ—Å—Ç—å #" + guestCustomer.getId());
        guestUser.put("email", "guest@temp.com");
        guestUser.put("role", "GUEST");
        guestUser.put("customerId", guestCustomer.getId());
        guestUser.put("customerType", "Customer");
        guestUser.put("balance", guestCustomer.getMoney());
        guestUser.put("discount", 0.0);

        response.put("success", true);
        response.put("message", "–í—Ö—ñ–¥ —è–∫ –≥—ñ—Å—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–æ! –ë–∞–ª–∞–Ω—Å: 2000‚Ç¥, –∑–Ω–∏–∂–∫–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ");
        response.put("token", "guest_" + guestCustomer.getId()); // –ü—Ä–æ—Å—Ç–∏–π —Ç–æ–∫–µ–Ω –¥–ª—è –≥–æ—Å—Ç—è
        response.put("user", guestUser);

        return response;
    }

    public boolean userExists(String username) {
        return userRepository.existsByUsername(username);
    }

    public Map<String, Object> deleteGuestAccount(String token) {
        Map<String, Object> response = new HashMap<>();
        
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ —Ü–µ –≥–æ—Å—Ç—å–æ–≤–∏–π —Ç–æ–∫–µ–Ω
            if (token != null && token.startsWith("guest_")) {
                // –í–∏—Ç—è–≥—É—î–º–æ ID –ø–æ–∫—É–ø—Ü—è –∑ —Ç–æ–∫–µ–Ω–∞
                String customerIdStr = token.replace("guest_", "");
                Long customerId = Long.parseLong(customerIdStr);
                
                // –í–∏–¥–∞–ª—è—î–º–æ –≥–æ—Å—Ç—å–æ–≤–æ–≥–æ –ø–æ–∫—É–ø—Ü—è
                Optional<Customer> guestCustomer = customerService.getCustomerById(customerId);
                if (guestCustomer.isPresent()) {
                    customerService.deleteCustomer(customerId);
                    response.put("success", true);
                    response.put("message", "–ì–æ—Å—Ç—å–æ–≤–∏–π –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ");
                } else {
                    response.put("success", false);
                    response.put("message", "–ì–æ—Å—Ç—å–æ–≤–∏–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                }
            } else {
                response.put("success", false);
                response.put("message", "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∏–π –≥–æ—Å—Ç—å–æ–≤–∏–π —Ç–æ–∫–µ–Ω");
            }
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –≥–æ—Å—Ç—å–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç—É: " + e.getMessage());
        }
        
        return response;
    }

    private RegularCustomer findCustomerByUserId(Long userId) {
        // –®—É–∫–∞—î–º–æ –ø–æ–∫—É–ø—Ü—è –∑–∞ —ñ–º'—è–º (–º—ñ—Å—Ç–∏—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
        String searchPattern = "(ID: " + userId + ")";
        return customerService.getAllRegularCustomers().stream()
                .filter(customer -> customer.getFullName().contains(searchPattern))
                .findFirst()
                .orElse(null);
    }

    public Map<String, Object> getCurrentUserInfo(Long customerId) {
        Map<String, Object> response = new HashMap<>();
        
        try {
            Optional<Customer> customerOpt = customerService.getCustomerById(customerId);
            if (customerOpt.isEmpty()) {
                response.put("success", false);
                response.put("message", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π");
                return response;
            }
            
            Customer customer = customerOpt.get();
            
            response.put("success", true);
            response.put("balance", customer.getMoney());
            response.put("discount", customer.getIndividualDiscount());
            
            if (customer instanceof RegularCustomer regularCustomer) {
                response.put("totalPurchases", regularCustomer.getTotalPurchasesAmount());
                response.put("customerType", "RegularCustomer");
            } else {
                response.put("totalPurchases", 0.0);
                response.put("customerType", "Customer");
            }
            
            return response;
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó: " + e.getMessage());
            return response;
        }
    }

    private Map<String, Object> createUserResponse(User user, RegularCustomer customer) {
        Map<String, Object> userResponse = new HashMap<>();
        userResponse.put("id", user.getId());
        userResponse.put("username", user.getUsername());
        userResponse.put("email", user.getEmail());
        userResponse.put("role", user.getRole().toString());
        userResponse.put("customerId", customer.getId());
        userResponse.put("customerType", "RegularCustomer");
        userResponse.put("balance", customer.getMoney());
        userResponse.put("discount", customer.getIndividualDiscount());
        userResponse.put("totalPurchases", customer.getTotalPurchasesAmount());
        
        if (user instanceof Admin admin) {
            userResponse.put("adminLevel", admin.getAdminLevel());
            userResponse.put("permissions", admin.getPermissions());
        }
        
        return userResponse;
    }

    public Map<String, Object> validateToken(String token) {
        Map<String, Object> response = new HashMap<>();
        
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–æ—Å—Ç—å–æ–≤–∏–π —Ç–æ–∫–µ–Ω
            if (token != null && token.startsWith("guest_")) {
                String customerIdStr = token.replace("guest_", "");
                Long customerId = Long.parseLong(customerIdStr);
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –≥–æ—Å—Ç—å–æ–≤–∏–π –ø–æ–∫—É–ø–µ—Ü—å
                Optional<Customer> guestCustomer = customerService.getCustomerById(customerId);
                if (guestCustomer.isPresent()) {
                    response.put("success", true);
                    response.put("message", "–ì–æ—Å—Ç—å–æ–≤–∏–π —Ç–æ–∫–µ–Ω –¥—ñ–π—Å–Ω–∏–π");
                    response.put("tokenType", "GUEST");
                } else {
                    response.put("success", false);
                    response.put("message", "–ì–æ—Å—Ç—å–æ–≤–∏–π –∞–∫–∞—É–Ω—Ç –Ω–µ —ñ—Å–Ω—É—î");
                }
                return response;
            }
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ JWT —Ç–æ–∫–µ–Ω
            if (!jwtUtils.validateJwtToken(token)) {
                response.put("success", false);
                response.put("message", "–¢–æ–∫–µ–Ω –Ω–µ–¥—ñ–π—Å–Ω–∏–π –∞–±–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π");
                return response;
            }
            
            // –Ø–∫—â–æ —Ç–æ–∫–µ–Ω –¥—ñ–π—Å–Ω–∏–π, –æ—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ –Ω—å–æ–≥–æ
            String username = jwtUtils.getUserNameFromJwtToken(token);
            Long userId = jwtUtils.getUserIdFromJwtToken(token);
            String role = jwtUtils.getRoleFromJwtToken(token);
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
            Optional<User> userOpt = userRepository.findById(userId);
            if (userOpt.isEmpty()) {
                response.put("success", false);
                response.put("message", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π");
                return response;
            }
            
            User user = userOpt.get();
            if (!user.isActive()) {
                response.put("success", false);
                response.put("message", "–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ");
                return response;
            }
            
            response.put("success", true);
            response.put("message", "–¢–æ–∫–µ–Ω –¥—ñ–π—Å–Ω–∏–π");
            response.put("tokenType", "JWT");
            response.put("username", username);
            response.put("userId", userId);
            response.put("role", role);
            
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–æ–∫–µ–Ω–∞: " + e.getMessage());
        }
        
        return response;
    }

    public Map<String, Object> refreshToken(String token) {
        Map<String, Object> response = new HashMap<>();
        
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–æ—Å—Ç—å–æ–≤–∏–π —Ç–æ–∫–µ–Ω - –¥–ª—è –≥–æ—Å—Ç–µ–π –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–µ
            if (token != null && token.startsWith("guest_")) {
                response.put("success", false);
                response.put("message", "–ì–æ—Å—Ç—å–æ–≤—ñ —Ç–æ–∫–µ–Ω–∏ –Ω–µ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è");
                return response;
            }
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ JWT —Ç–æ–∫–µ–Ω (–Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤—ñ–Ω —Ç—Ä–æ—Ö–∏ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π)
            String username = null;
            Long userId = null;
            String role = null;
            
            try {
                username = jwtUtils.getUserNameFromJwtToken(token);
                userId = jwtUtils.getUserIdFromJwtToken(token);
                role = jwtUtils.getRoleFromJwtToken(token);
            } catch (Exception e) {
                // –Ø–∫—â–æ —Ç–æ–∫–µ–Ω –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π, –∞–ª–µ —â–µ –º–æ–∂–Ω–∞ –≤–∏—Ç—è–≥—Ç–∏ –¥–∞–Ω—ñ
                response.put("success", false);
                response.put("message", "–¢–æ–∫–µ–Ω –∑–∞–Ω–∞–¥—Ç–æ —Å—Ç–∞—Ä–∏–π –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è");
                return response;
            }
            
            if (username == null || userId == null) {
                response.put("success", false);
                response.put("message", "–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏—Ç—è–≥—Ç–∏ –¥–∞–Ω—ñ –∑ —Ç–æ–∫–µ–Ω–∞");
                return response;
            }
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
            Optional<User> userOpt = userRepository.findById(userId);
            if (userOpt.isEmpty()) {
                response.put("success", false);
                response.put("message", "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π");
                return response;
            }
            
            User user = userOpt.get();
            if (!user.isActive()) {
                response.put("success", false);
                response.put("message", "–ê–∫–∫–∞—É–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ");
                return response;
            }
            
            // –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤–∏–π —Ç–æ–∫–µ–Ω
            String newToken = jwtUtils.generateJwtToken(username, role, userId);
            
            // –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            RegularCustomer customer = findCustomerByUserId(userId);
            if (customer == null) {
                response.put("success", false);
                response.put("message", "–î–∞–Ω—ñ –ø–æ–∫—É–ø—Ü—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
                return response;
            }
            
            response.put("success", true);
            response.put("message", "–¢–æ–∫–µ–Ω —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ");
            response.put("token", newToken);
            response.put("user", createUserResponse(user, customer));
            
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞: " + e.getMessage());
        }
        
        return response;
    }
} 