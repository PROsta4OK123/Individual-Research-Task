// –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó

// === –ê–î–ú–Ü–ù–Ü–°–¢–†–ê–¢–ò–í–ù–Ü –§–£–ù–ö–¶–Ü–á ===
function updateQuantity() {
    if (!currentUser || currentUser.role !== 'ADMIN') {
        showResult('‚ùå –ù–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞', 'error', 'admin');
        return;
    }

    const productId = document.getElementById('adminProducts').value;
    const quantity = document.getElementById('newQuantity').value;

    if (!productId || quantity === '') {
        showResult('–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä —Ç–∞ –≤–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å', 'error', 'admin');
        return;
    }

    fetch(`${API_BASE}/admin/products/${productId}/quantity?adminId=${currentUser.id}&quantity=${quantity}`, {
        method: 'PUT'
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showResult(`‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–æ: ${data.oldQuantity} ‚Üí ${data.newQuantity}`, 'success', 'admin');
            loadProducts();
            loadProductsForAdmin();
            document.getElementById('newQuantity').value = '';
        } else {
            showResult('‚ùå ' + data.message, 'error', 'admin');
        }
    })
    .catch(error => showResult('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ' + error.message, 'error', 'admin'));
}

function deleteProduct() {
    if (!currentUser || currentUser.role !== 'ADMIN') {
        showResult('‚ùå –ù–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞', 'error', 'admin');
        return;
    }

    const productId = document.getElementById('adminProducts').value;

    if (!productId) {
        showResult('–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è', 'error', 'admin');
        return;
    }

    if (!confirm('‚ö†Ô∏è –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π —Ç–æ–≤–∞—Ä?')) {
        return;
    }

    fetch(`${API_BASE}/admin/products/${productId}?adminId=${currentUser.id}`, {
        method: 'DELETE'
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showResult(`‚úÖ –¢–æ–≤–∞—Ä –≤–∏–¥–∞–ª–µ–Ω–æ: ${data.deletedProduct.name}`, 'success', 'admin');
            loadProducts();
            loadProductsForAdmin();
        } else {
            showResult('‚ùå ' + data.message, 'error', 'admin');
        }
    })
    .catch(error => showResult('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ' + error.message, 'error', 'admin'));
}

function showProductForm() {
    const type = document.getElementById('productType').value;
    
    // –•–æ–≤–∞—î–º–æ –≤—Å—ñ —Ñ–æ—Ä–º–∏
    document.getElementById('laptopForm').classList.add('hidden');
    document.getElementById('phoneForm').classList.add('hidden');
    document.getElementById('smartphoneForm').classList.add('hidden');
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—É —Ñ–æ—Ä–º—É
    if (type) {
        document.getElementById(type.replace('-', '') + 'Form').classList.remove('hidden');
    }
}

function createLaptop() {
    if (!currentUser || currentUser.role !== 'ADMIN') {
        showResult('‚ùå –ù–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞', 'error', 'admin');
        return;
    }

    const data = {
        name: document.getElementById('laptopName').value,
        price: parseFloat(document.getElementById('laptopPrice').value),
        firm: document.getElementById('laptopFirm').value,
        maxDiscountPercentage: parseFloat(document.getElementById('laptopDiscount').value),
        diagonalSize: parseInt(document.getElementById('laptopDiagonal').value),
        weight: parseFloat(document.getElementById('laptopWeight').value),
        cpuCoreCount: parseInt(document.getElementById('laptopCores').value),
        memoryCount: parseInt(document.getElementById('laptopMemory').value),
        imageURL: document.getElementById('laptopImageURL').value,
        quantity: parseInt(document.getElementById('laptopQuantity').value) || 0
    };

    fetch(`${API_BASE}/admin/products/laptop?adminId=${currentUser.id}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showResult('‚úÖ –ù–æ—É—Ç–±—É–∫ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!', 'success', 'admin');
            loadProducts();
            loadProductsForAdmin();
            clearForm('laptopForm');
        } else {
            showResult('‚ùå ' + data.message, 'error', 'admin');
        }
    })
    .catch(error => showResult('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ—É—Ç–±—É–∫–∞: ' + error.message, 'error', 'admin'));
}

function createMobilePhone() {
    if (!currentUser || currentUser.role !== 'ADMIN') {
        showResult('‚ùå –ù–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞', 'error', 'admin');
        return;
    }

    const data = {
        name: document.getElementById('phoneName').value,
        price: parseFloat(document.getElementById('phonePrice').value),
        firm: document.getElementById('phoneFirm').value,
        maxDiscountPercentage: parseFloat(document.getElementById('phoneDiscount').value),
        isContract: document.getElementById('phoneContract').value === 'true',
        maxSimValue: parseInt(document.getElementById('phoneSimCount').value),
        imageURL: document.getElementById('phoneImageURL').value,
        quantity: parseInt(document.getElementById('phoneQuantity').value) || 0
    };

    fetch(`${API_BASE}/admin/products/mobile-phone?adminId=${currentUser.id}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showResult('‚úÖ –ú–æ–±—ñ–ª—å–Ω–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!', 'success', 'admin');
            loadProducts();
            loadProductsForAdmin();
            clearForm('phoneForm');
        } else {
            showResult('‚ùå ' + data.message, 'error', 'admin');
        }
    })
    .catch(error => showResult('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É: ' + error.message, 'error', 'admin'));
}

function createSmartphone() {
    if (!currentUser || currentUser.role !== 'ADMIN') {
        showResult('‚ùå –ù–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞', 'error', 'admin');
        return;
    }

    const programsText = document.getElementById('smartphonePrograms').value;
    const programs = programsText ? programsText.split(',').map(p => p.trim()) : [];

    const data = {
        name: document.getElementById('smartphoneName').value,
        price: parseFloat(document.getElementById('smartphonePrice').value),
        firm: document.getElementById('smartphoneFirm').value,
        maxDiscountPercentage: parseFloat(document.getElementById('smartphoneDiscount').value),
        isContract: document.getElementById('smartphoneContract').value === 'true',
        maxSimValue: parseInt(document.getElementById('smartphoneSimCount').value),
        OS: document.getElementById('smartphoneOS').value,
        installedPrograms: programs,
        imageURL: document.getElementById('smartphoneImageURL').value,
        quantity: parseInt(document.getElementById('smartphoneQuantity').value) || 0
    };

    fetch(`${API_BASE}/admin/products/smartphone?adminId=${currentUser.id}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showResult('‚úÖ –°–º–∞—Ä—Ç—Ñ–æ–Ω —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!', 'success', 'admin');
            loadProducts();
            loadProductsForAdmin();
            clearForm('smartphoneForm');
        } else {
            showResult('‚ùå ' + data.message, 'error', 'admin');
        }
    })
    .catch(error => showResult('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–º–∞—Ä—Ç—Ñ–æ–Ω—É: ' + error.message, 'error', 'admin'));
}

function loadProductStats() {
    fetch(`${API_BASE}/admin/products/stats`)
        .then(response => response.json())
        .then(stats => {
            const statsHtml = `
                <div class="success" style="margin-top: 20px;">
                    <h4>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä—ñ–≤</h4>
                    <div class="grid">
                        <div>
                            <p><strong>üì¶ –í—Å—å–æ–≥–æ —Ç–æ–≤–∞—Ä—ñ–≤:</strong> ${stats.totalProducts}</p>
                            <p><strong>üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å:</strong> ${stats.totalQuantity}</p>
                        </div>
                        <div>
                            <p><strong>üí∞ –°–µ—Ä–µ–¥–Ω—è —Ü—ñ–Ω–∞:</strong> ${stats.averagePrice.toFixed(2)}‚Ç¥</p>
                            <p><strong>‚ö†Ô∏è –ù–µ–º–∞—î –Ω–∞ —Å–∫–ª–∞–¥—ñ:</strong> ${stats.outOfStock}</p>
                            <p><strong>üìâ –ú–∞–ª–æ –Ω–∞ —Å–∫–ª–∞–¥—ñ:</strong> ${stats.lowStock}</p>
                        </div>
                    </div>
                </div>
            `;
            document.getElementById('statsResult').innerHTML = statsHtml;
        })
        .catch(error => showResult('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ' + error.message, 'error', 'admin'));
}

// === –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –¢–û–í–ê–†–Ü–í ===
let editingProduct = null;

function loadProductForEdit() {
    const productId = document.getElementById('editProductSelect').value;
    
    if (!productId) {
        document.getElementById('editProductForm').classList.add('hidden');
        editingProduct = null;
        return;
    }

    fetch(`${API_BASE}/products`)
        .then(response => response.json())
        .then(products => {
            const product = products.find(p => p.id == productId);
            if (product) {
                editingProduct = product;
                populateEditForm(product);
                document.getElementById('editProductForm').classList.remove('hidden');
            }
        })
        .catch(error => showResult('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É: ' + error.message, 'error', 'admin'));
}

function populateEditForm(product) {
    const productType = product.productType || getProductType(product);
    
    // –ó–∞–≥–∞–ª—å–Ω—ñ –ø–æ–ª—è
    document.getElementById('editName').value = product.name || '';
    document.getElementById('editPrice').value = product.price || '';
    document.getElementById('editFirm').value = product.firm || '';
    document.getElementById('editDiscount').value = product.maxDiscountPercentage || '';
    document.getElementById('editImageURL').value = product.imageURL || '';
    document.getElementById('editQuantity').value = product.quantity || '';
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    document.getElementById('editProductTitle').textContent = `–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: ${product.name} (${productType})`;
    
    // –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –ø–æ–ª—è
    const specificFieldsContainer = document.getElementById('editSpecificFields');
    specificFieldsContainer.innerHTML = '';
    
    if (productType === 'Laptop') {
        specificFieldsContainer.innerHTML = `
            <div class="form-group">
                <label>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–æ—É—Ç–±—É–∫–∞:</label>
                <div class="grid">
                    <input type="number" id="editDiagonalSize" placeholder="–î—ñ–∞–≥–æ–Ω–∞–ª—å (–¥—é–π–º–∏)" value="${product.diagonalSize || ''}">
                    <input type="number" id="editWeight" placeholder="–í–∞–≥–∞ (–∫–≥)" step="0.1" value="${product.weight || ''}">
                    <input type="number" id="editCpuCoreCount" placeholder="–ö—ñ–ª—å–∫—ñ—Å—Ç—å —è–¥–µ—Ä" value="${product.cpuCoreCount || ''}">
                    <input type="number" id="editMemoryCount" placeholder="–ü–∞–º'—è—Ç—å (–ú–ë)" value="${product.memoryCount || ''}">
                </div>
            </div>
        `;
    } else if (productType === 'MobilePhone' || productType === 'Smartphone') {
        let phoneFields = `
            <div class="form-group">
                <label>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—É:</label>
                <div class="grid">
                    <select id="editIsContract">
                        <option value="false" ${!product.contract ? 'selected' : ''}>–ë–µ–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É</option>
                        <option value="true" ${product.contract ? 'selected' : ''}>–ó –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º</option>
                    </select>
                    <input type="number" id="editMaxSimValue" placeholder="–ú–∞–∫—Å. SIM-–∫–∞—Ä—Ç" min="1" value="${product.maxSimValue || ''}">
                </div>
            </div>
        `;
        
        if (productType === 'Smartphone') {
            phoneFields += `
                <div class="form-group">
                    <label>–î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–º–∞—Ä—Ç—Ñ–æ–Ω—É:</label>
                    <input type="text" id="editOS" placeholder="–û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞ —Å–∏—Å—Ç–µ–º–∞" value="${product.os || ''}">
                    <textarea id="editInstalledPrograms" placeholder="–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –ø—Ä–æ–≥—Ä–∞–º–∏ (—á–µ—Ä–µ–∑ –∫–æ–º—É)" rows="2">${product.installedPrograms ? product.installedPrograms.join(', ') : ''}</textarea>
                </div>
            `;
        }
        
        specificFieldsContainer.innerHTML = phoneFields;
    }
}

function getProductType(product) {
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Ç–æ–≤–∞—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞—è–≤–Ω–∏—Ö –ø–æ–ª—ñ–≤
    if (product.hasOwnProperty('diagonalSize') || product.hasOwnProperty('cpuCoreCount')) {
        return 'Laptop';
    } else if (product.hasOwnProperty('os') || product.hasOwnProperty('installedPrograms')) {
        return 'Smartphone';
    } else if (product.hasOwnProperty('maxSimValue') || product.hasOwnProperty('contract')) {
        return 'MobilePhone';
    }
    return 'Product';
}

function saveProductChanges() {
    if (!currentUser || currentUser.role !== 'ADMIN') {
        showResult('‚ùå –ù–µ–º–∞—î –ø—Ä–∞–≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞', 'error', 'admin');
        return;
    }

    if (!editingProduct) {
        showResult('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –æ–±—Ä–∞–Ω–æ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è', 'error', 'admin');
        return;
    }

    const updates = {
        name: document.getElementById('editName').value,
        price: parseFloat(document.getElementById('editPrice').value),
        firm: document.getElementById('editFirm').value,
        maxDiscountPercentage: parseFloat(document.getElementById('editDiscount').value),
        imageURL: document.getElementById('editImageURL').value,
        quantity: parseInt(document.getElementById('editQuantity').value)
    };

    // –î–æ–¥–∞—î–º–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –ø–æ–ª—è –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É —Ç–æ–≤–∞—Ä—É
    const productType = getProductType(editingProduct);
    
    if (productType === 'Laptop') {
        updates.diagonalSize = parseInt(document.getElementById('editDiagonalSize').value);
        updates.weight = parseFloat(document.getElementById('editWeight').value);
        updates.cpuCoreCount = parseInt(document.getElementById('editCpuCoreCount').value);
        updates.memoryCount = parseInt(document.getElementById('editMemoryCount').value);
    } else if (productType === 'MobilePhone' || productType === 'Smartphone') {
        updates.isContract = document.getElementById('editIsContract').value === 'true';
        updates.maxSimValue = parseInt(document.getElementById('editMaxSimValue').value);
        
        if (productType === 'Smartphone') {
            updates.OS = document.getElementById('editOS').value;
            const programsText = document.getElementById('editInstalledPrograms').value;
            updates.installedPrograms = programsText || '';
        }
    }

    fetch(`${API_BASE}/admin/products/${editingProduct.id}?adminId=${currentUser.id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updates)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showResult(`‚úÖ –¢–æ–≤–∞—Ä "${editingProduct.name}" —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!`, 'success', 'admin');
            loadProducts();
            loadProductsForAdmin();
            cancelProductEdit();
        } else {
            showResult('‚ùå ' + data.message, 'error', 'admin');
        }
    })
    .catch(error => showResult('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: ' + error.message, 'error', 'admin'));
}

function cancelProductEdit() {
    document.getElementById('editProductForm').classList.add('hidden');
    document.getElementById('editProductSelect').value = '';
    editingProduct = null;
} 