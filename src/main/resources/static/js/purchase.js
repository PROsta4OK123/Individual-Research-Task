// –§—É–Ω–∫—Ü—ñ—ó –ø–æ–∫—É–ø–∫–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ

// === –ü–û–ö–£–ü–ö–ò –í –ú–û–î–ê–õ–¨–ù–û–ú–£ –í–Ü–ö–ù–Ü ===
function calculatePriceModal() {
    if (!selectedProductId) {
        showModalResult('–¢–æ–≤–∞—Ä –Ω–µ –æ–±—Ä–∞–Ω–æ', 'error');
        return;
    }

    const customerId = currentUser.customerId || currentUser.id;
    fetch(`${API_BASE}/products/calculate-price?customerId=${customerId}&productId=${selectedProductId}`)
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                showModalResult('‚ùå ' + data.error, 'error');
            } else {
                const discountInfo = data.appliedDiscount > 0 ? 
                    `<p><strong>–í–∞—à–∞ –∑–Ω–∏–∂–∫–∞:</strong> ${data.appliedDiscount}% üéâ</p>
                     <p><strong>–ï–∫–æ–Ω–æ–º—ñ—è:</strong> ${(data.originalPrice - data.finalPrice).toFixed(2)}‚Ç¥</p>` :
                    `<p><strong>–ó–Ω–∏–∂–∫–∞:</strong> –í—ñ–¥—Å—É—Ç–Ω—è (–ø–æ—Ç—Ä—ñ–±–Ω–æ –±—ñ–ª—å—à–µ –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–Ω–∏–∂–∫–∏)</p>`;
                
                const message = `
                    <h4>üí∞ –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∞—Ä—Ç–æ—Å—Ç—ñ</h4>
                    <p><strong>–ü–æ—á–∞—Ç–∫–æ–≤–∞ —Ü—ñ–Ω–∞:</strong> ${data.originalPrice.toFixed(2)}‚Ç¥</p>
                    ${discountInfo}
                    <p><strong>–ü—ñ–¥—Å—É–º–∫–æ–≤–∞ —Ü—ñ–Ω–∞:</strong> ${data.finalPrice.toFixed(2)}‚Ç¥</p>
                    <p><strong>–ú–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç–∏:</strong> ${data.canAfford ? '‚úÖ –¢–∞–∫' : '‚ùå –ù—ñ (–Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤)'}</p>
                `;
                showModalResult(message, 'success');
            }
        })
        .catch(error => showModalResult('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É: ' + error.message, 'error'));
}

function makePurchaseModal() {
    if (!selectedProductId) {
        showModalResult('–¢–æ–≤–∞—Ä –Ω–µ –æ–±—Ä–∞–Ω–æ', 'error');
        return;
    }

    fetch(`${API_BASE}/products`)
        .then(response => response.json())
        .then(products => {
            const selectedProduct = products.find(p => p.id == selectedProductId);
            
            if (!selectedProduct) {
                showModalResult('‚ùå –¢–æ–≤–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', 'error');
                return;
            }
            
            if (selectedProduct.quantity <= 0) {
                showModalResult('‚ùå –¢–æ–≤–∞—Ä—É –Ω–µ–º–∞—î –Ω–∞ —Å–∫–ª–∞–¥—ñ!', 'error');
                return;
            }
            
            const customerId = currentUser.customerId || currentUser.id;
            return fetch(`${API_BASE}/purchases?customerId=${customerId}&productId=${selectedProductId}`, {
                method: 'POST'
            });
        })
        .then(response => {
            if (!response) return;
            return response.json();
        })
        .then(data => {
            if (!data) return;
            
            if (data.success) {
                const discountApplied = data.appliedDiscount > 0 ? 
                    `<p><strong>–ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∞ –∑–Ω–∏–∂–∫–∞:</strong> ${data.appliedDiscount}% üéâ</p>` :
                    `<p><strong>–ó–Ω–∏–∂–∫–∞:</strong> –ù–µ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–∞</p>`;
                
                const message = `
                    <h4>üéâ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø—ñ—à–Ω–∞!</h4>
                    <p><strong>–¢–æ–≤–∞—Ä:</strong> ${data.productName}</p>
                    <p><strong>–ü—ñ–¥—Å—É–º–∫–æ–≤–∞ —Ü—ñ–Ω–∞:</strong> ${data.finalPrice.toFixed(2)}‚Ç¥</p>
                    ${discountApplied}
                    <p><strong>–ó–∞–ª–∏—à–æ–∫ –∫–æ—à—Ç—ñ–≤:</strong> ${data.remainingMoney.toFixed(2)}‚Ç¥</p>
                    <p style="margin-top: 10px; font-size: 14px; opacity: 0.8;">üí° –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è...</p>
                `;
                showModalResult(message, 'success', 8000);
                
                // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Å–µ—Ä–≤–µ—Ä–∞
                refreshUserInfo();
                
                // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä—É –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ
                updateModalProductStock();
                
                // –û–Ω–æ–≤–ª—é—î–º–æ –∫–∞—Ç–∞–ª–æ–≥
                loadProducts();
                if (currentUser.role === 'ADMIN') {
                    loadProductsForAdmin();
                }
            } else {
                showModalResult('‚ùå ' + data.message, 'error');
            }
        })
        .catch(error => showModalResult('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∫—É–ø–∫–∏: ' + error.message, 'error'));
}

function showModalResult(message, type, duration = 6000) {
    const resultElement = document.getElementById('modalPurchaseResult');
    resultElement.innerHTML = `
        ${message}
        <button class="close-btn" onclick="closeModalResult()" title="–ó–∞–∫—Ä–∏—Ç–∏">‚úï</button>
    `;
    resultElement.className = `result ${type}`;
    resultElement.style.display = 'block';
    
    clearTimeout(resultElement.timeoutId);
    resultElement.timeoutId = setTimeout(() => {
        resultElement.style.display = 'none';
    }, duration);
}

function closeModalResult() {
    const element = document.getElementById('modalPurchaseResult');
    if (element) {
        clearTimeout(element.timeoutId);
        element.style.display = 'none';
    }
}

function updateModalProductStock() {
    if (!selectedProductId) return;
    
    fetch(`${API_BASE}/products`)
        .then(response => response.json())
        .then(products => {
            const product = products.find(p => p.id == selectedProductId);
            if (product) {
                const stockElement = document.getElementById('modalProductStock');
                if (product.quantity > 0) {
                    stockElement.className = 'stock-status in-stock';
                    stockElement.innerHTML = `‚úÖ –í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ: ${product.quantity} —à—Ç.`;
                } else {
                    stockElement.className = 'stock-status out-of-stock';
                    stockElement.innerHTML = '‚ùå –ù–µ–º–∞—î –Ω–∞ —Å–∫–ª–∞–¥—ñ';
                }
                
                // –û–Ω–æ–≤–ª—é—î–º–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑ –Ω–æ–≤–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é
                displayProductCharacteristics(product);
            }
        })
        .catch(error => console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É:', error));
}

// –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Å–µ—Ä–≤–µ—Ä–∞
function refreshUserInfo() {
    const customerId = currentUser.customerId || currentUser.id;
    fetch(`${API_BASE}/auth/user-info?customerId=${customerId}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                currentUser.balance = parseFloat(data.balance);
                currentUser.discount = parseFloat(data.discount);
                currentUser.totalPurchases = parseFloat(data.totalPurchases);
                currentUser.customerType = data.customerType;
                localStorage.setItem('currentUser', JSON.stringify(currentUser));
                updateUserInfo();
            }
        })
        .catch(error => console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error));
} 